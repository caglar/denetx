/*
 * dvec.h
 *
 *  Created on: Apr 26, 2011
 *      Author: caglar
 */

#ifndef DVEC_H_
#define DVEC_H_

#include <map>
#include <boost/multi_array.hpp>


typedef std::map<int, float> DVec;
typedef std::pair<int, float> DPair;

struct extract_second
{
    template <typename T, typename U>
        const U operator() (const std::pair<T,U> &p) const
        {
            return p.second;
        }
};

void
add_to_val(int i, DVec& dVec, float val);

void
copy_array_elements(DVec &dvec, float *val);

void
copy_dvec_to_marray(DVec &dvec, boost::multi_array<float,1> vec);

void
copy_dvec_to_array(DVec &dvec, float *val);

void
resize_dvec (DVec &dvec, size_t new_size);

bool
val_cmp(DVec::value_type &i1, DVec::value_type &i2);

int
max_index(DVec& dmap);

int
max_val(DVec& dmap);

int
min_index(DVec& dmap);

int
min_val(DVec& dmap);

float
sum_of_vals(DVec& dmap);

void
scale_vals(DVec& dmap, float sval);

void
normalize(DVec& dmap);

int
get_num_non_zero (DVec & dvec);

#endif /* DVEC_H_ */
